"${__BUD__IO_RC:-false}" && return 0
readonly __BUD__IO_RC=true

source "$(dirname "${BASH_SOURCE[0]}")/envvars.rc"
source "${BUD_HOME}/lib/core.rc"

__BUD_SESSION_ID=$(date +"%Y-%m-%d_%T-%6N" | sed 's![/:]!-!g')

function bud_temp_file() {
  mktemp -p "${TEMP:-/tmp}/bud/${BUD_APPCLASS_NAME}/${__BUD_SESSION_ID}"
}

function bud_temp_fifo() {
  local _ret
  _ret="$(mktemp -d -p "${TEMP:-/tmp}/bud/${BUD_APPCLASS_NAME}/${__BUD_SESSION_ID}")/0"
  mkfifo "${_ret}"
  echo "${_ret}"
}

# Filter files in input by a given predicate
# Useful when you do not want to get non-zero exit code for no matching input record.
# Usage:
#    filter_file '[[ "${_each}" =~ (test-.+|.*-test|test) ]]'
# Single quotes are necessary.
function filter_file() {
  local _predicate="${1}" _file="${2:-/dev/stdin}"
  local _each
  debug "_predicate: '${_predicate}'"
  while IFS= read -r _each; do
    eval "if ${_predicate} ; then echo '${_each}'; fi"
  done <"${_file}"
}

function map_file() {
  local _function="${1}" _file="${2:-/dev/stdin}"
  local _each
  debug "_function: '${_function}'"
  while IFS= read -r _each; do
    eval "${_function}"
  done <"${_file}"
}


mkdir -p "${TEMP:-/tmp}/bud/${BUD_APPCLASS_NAME}/${__BUD_SESSION_ID}"

