"${__BUD__CORE_RC:-false}" && return 0
readonly __BUD__CORE_RC=true

source "${BUD_LIB:="$(dirname "${BASH_SOURCE[0]}")"}/envvars.rc"

function is_void_value() {
  if [[ ${1} == "${BUD_VOID}" ]]; then
    return 0
  else
    return 1
  fi
}

function void_value() {
  echo "${BUD_VOID}"
}

function message() {
  echo "${@}" >&2
}

function assert_that() {
  local _message="${1}"
  shift
  if ! eval "${@}"; then
    abort "$(printf "Condition was not satisfied:\n  Condition: %s\n  Detail: %s" "${_message}" "${*}")"
  fi
}

function print_stacktrace() {
  local _message="${1}"
  shift
  message "${_message}" "${@}"
  local _i=0
  local _e
  while _e="$(caller $_i)"; do
    # shellcheck disable=SC2086
    _e="$(__bud__format_caller_for_stacktrace ${_e})"
    message "  at ${_e}"
    _i=$((_i + 1))
  done
}

function __bud__format_caller_for_stacktrace() {
  local _line="${1:-???}" _function="${2:-unknown}" _file="${3:-unknown file}"
  _file="${_file/${OUTDIR:-""}/${SRCDIR:-""}}"
  _file="${_file#${PWD}/}"
  printf "%s:%s (%s)" "${_file}" "${_line}" "${_function}"
}

####
# Used when a condition is not met and a program should NOT go on.
function abort() {
  print_stacktrace "ERROR:(exit code:$?, pipe status: ${PIPESTATUS[*]}): " "${@}"
  exit 1
}

trap abort ERR
