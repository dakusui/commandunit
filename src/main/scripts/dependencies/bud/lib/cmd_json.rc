"${__BUD__CMD_JSON_RC:-false}" && return 0
readonly __BUD__CMD_JSON_RC=true

##########################################################################################
# cmd_json.rc: A library to run a JSON object as a command line.
#
# The entry point is "run_json_object" function.
#
##########################################################################################

source "$(dirname "${BASH_SOURCE[0]}")/common.rc"

function __bud__get_description_from_json_object() {
  local _json_object="${1}"
  json_value_at "${_json_object}" ".description[]"
}

function __bud__get_stdin_from_json_object() {
  local _json_object="${1}"
  json_value_at "${_json_object}" ".stdin[]"
}

function __bud__get_shell_name_from_json_object() {
  local _json_object="${1}"
  json_value_at "${_json_object}" ".shell.name"
}

function __bud__get_shell_options_from_json_object() {
  local _json_object="${1}"
  json_value_at "${_json_object}" ".shell.options[]"
}

function __bud__compose_shell_from_json_object() {
  local _json_object="${1}"
  printf "%s %s" "$(__bud__get_shell_name_from_json_object "${_json_object}")" "$(__bud__get_shell_options_from_json_object "${_json_object}")"
}

function __bud__get_source_from_json_object() {
  local _json_object="${1}"
  json_value_at "${_json_object}" ".source[]"
}

function __bud__get_command_name_from_json_object() {
  local _json_object="${1}"
  json_value_at "${_json_object}" ".cmd"
}

function __bud__get_args_from_json_object() {
  local _json_object="${1}"
  json_value_at "${_json_object}" ".args[]"
}

function __bud__compose_commandline_from_json_object() {
  local _json_object="${1}"
  local _ret _args _i

  _ret="$(__bud__get_command_name_from_json_object "${_json_object}")"
  mapfile -t _args < <(__bud__get_args_from_json_object "${_json_object}")
  for _i in "${_args[@]}"; do
    _ret="${_ret} $(quote "${_i}")"
  done

  echo "${_ret}"
}

function __bud__compose_script_from_json_object() {
  local _json_object="${1}"
  local _i _description

  # Print description of the command line to be run.
  mapfile -t _description < <(__bud__get_description_from_json_object "${_json_object}")
  for _i in "${_description[@]}"; do
    echo "# ${_i}"
  done

  # Print an empty line for readability
  local -a _supported_envvars _shell_format=""
  mapfile -t _supported_envvars < <(envsubst_variables)
  echo
  for _i in "${_supported_envvars[@]}"; do
    local _v='$'"${_i}"
    echo "# ${_i} $(eval "echo ${_v}")"
    if [[ "${_shell_format}" == "" ]]; then
      _shell_format='$'"${_i}"
    else
      _shell_format="${_shell_format},"'$'"${_i}"
    fi
  done
  echo

  # Print source directives to "include" files
  local _source_files
  mapfile -t _source_files < <(__bud__get_source_from_json_object "${_json_object}")
  for _i in "${_source_files[@]}"; do
    echo "source " "$(quote "${_i}" | envsubst "${_shell_format}")"
  done
  # Print an empty line for readability
  echo

  local _environment_variables
  _environment_variables="$(json_value_at "${_json_object}" '.environmentVariables')"
  info "_json_object: '${_json_object}'"
  jq -ncrM --argjson v "${_environment_variables}" '$v|keys[]|[., $v[.]]|"export " + .[0] + "=\"" + .[1] + "\""'
  # Print an empty line for readability
  echo

  # Print the command line
  __bud__compose_commandline_from_json_object "${_json_object}"
}

function envsubst_variables() {
  echo "BUD_LIB"
  echo "BUD_TEST_SRCDIR"
  echo "BUD_TEST_BASEDIR"
  echo "BUD_TEST_REPORTDIR"
}

function bud__file_for_exit_code() {
  echo "$(bud__directory_for_output)/exit_code.txt"
}

function bud__file_for_stdout() {
  echo "$(bud__directory_for_output)/stdout.txt"
}

function bud__file_for_stderr() {
  echo "$(bud__directory_for_output)/stderr.txt"
}

function bud__file_for_script() {
  echo "$(bud__directory_for_output)/script.txt"
}

function bud__directory_for_output() {
  echo "out"
}
####
# The argument looks like following.:
# [source, json]
# ----
# {
#		"description": [
#			"Just print a message 'Hello world'"
#		],
#		"stdin": [
#		],
#		"shell": {
#			"name": "bash",
#			"options": [
#				"-eu"
#			]
#		},
#		"source": [
#			"lib/common.rc"
#		],
#		"cmd": "echo",
#		"args": [
#			"-e",
#			"hello, world"
#		]
#	}
# ----
# "description": array: An array of string which describes what this object executes.
# "stdin":       array: An array given to the command as stdin.
#
# 1: A JSON object which describes the command to be executed and input to it
function run_json_object() {
  local _json_object="${1}"
  local _stdin _shell _script _i
  mapfile -t _stdin < <(__bud__get_stdin_from_json_object "${_json_object}")
  mapfile -t _script < <(__bud__compose_script_from_json_object "${_json_object}")
  _shell="$(__bud__compose_shell_from_json_object "${_json_object}")"

  mkdir -p "$(bud__directory_for_output)"
  local _i _exit_code
  for _i in "${_stdin[@]}"; do
    echo "${_i}"
  done | ${_shell} <(for _i in "${_script[@]}"; do
    echo "${_i}"
  done | tee "$(bud__file_for_script)") >"$(bud__file_for_stdout)" 2>"$(bud__file_for_stderr)" &&
    _exit_code=$? ||
    _exit_code=$?
  echo "${_exit_code}" >"$(bud__file_for_exit_code)"
}
