#!/usr/bin/env bash

source "$(dirname "$(dirname "${BASH_SOURCE[0]}")")/lib/main.rc"
source "${COMMANDUNIT_HOME}/lib/tap.rc"

COMMANDUNIT_SPECIFICATION="$(
  cat <<'END'
{
  "usage": "commandunit [OPTION]... [SUBCOMMAND]...",
  "description":[
    "Runs tests.",
    "",
    "Sub-commands:",
    "  preprocess:",
    "    Preprocesses test definition files (yaml++, yaml, and json++) and convert them into executable JSON test files",
    "  run:",
    "    Runs tests under a directory specified by --test-workdir and writes a report file: testreport.json under a ",
    "    directory specified by --test-reportdir.",
    "  report:",
    "    Reads a file testreport.json under directory specified by --test-reportdir and renders a report file (testreport.adoc)",
    "    under the same directory."
  ],
  "options":[
    ["h","help",false,false,"show this help"],
    ["p","parallel",false,false,"execute the tests in parallel"],
    ["f","filter",true,[".*"],"filter tests with the specified regular expression"],
    ["","commandunit-dir",true,[],"directory to store config and data files (default: current {directory/.commandunit})"],
    ["","project-name",true,["unknown"],"set project name of the test execution. used as the report's title"],
    ["","test-srcdir",true,[],"write test reports under the specified directory (default: current directory)"],
    ["","test-workdir",true,[],"write test reports under the specified directory (default: value for --test-srcdir + .commandunit/work)"],
    ["","test-reportdir",true,[],"write test reports under the specified directory (default: value for --test-workdir)"],
    ["","ignore-mtime",false,false,"ignore mtime and forcibly compile tests"],
    ["","clean",false,false,"clean working directory"],
    ["","tapview",false,false,"show test progress with 'tapview'"]
  ],
  "examples":{
    "commandunit": "Run tests found under current directory in sequential mode.",
    "commandunit --srcdir=DIR": "Run tests found under DIR in sequential mode.",
    "commandunit --srcdir=DIR -p": "Run tests found under DIR in parallel mode."
  },
  "references":{
    "github project": "https://github.com/dakusui/bud",
    "documentation": "https://dakusui.github.io/commandunit/"
  }
}
END
)"

function main() {
  local _parsed_opts_json
  _parsed_opts_json="$(parseopt "${COMMANDUNIT_SPECIFICATION}" "${@}")"
  debug "_parsed_opts_json: '${_parsed_opts_json}'"
  local _help
  _help="$(parseopt_boolean_value_for 'help' "${_parsed_opts_json}")"
  if [[ "${_help}" == true ]]; then
    print_usage "${COMMANDUNIT_SPECIFICATION}"
    return 0
  fi
  info_begin "commandunit"
  local _default_target_directory _project_name _is_parallel _filter _commandunit_dir _test_reportdir _subcommands _bindir _is_tapview_enabled _ignore_mtime
  _bindir="$(dirname "${BASH_SOURCE[0]}")"
  mapfile -t _subcommands < <(parseopt_rest_values "${_parsed_opts_json}")
  if [[ "${#_subcommands[@]}" == 0 ]]; then
    _subcommands=(preprocess run report)
  fi
  _default_target_directory="${COMMANDUNIT_PWD:-"${PWD}"}"
  _project_name="$(parseopt_string_value_for "project-name" "${_parsed_opts_json}")"
  _is_parallel="$(parseopt_boolean_value_for "parallel" "${_parsed_opts_json}")"
  _do_clean="$(parseopt_boolean_value_for "clean" "${_parsed_opts_json}")"
  _filter="$(parseopt_string_value_for 'filter' "${_parsed_opts_json}")"
  _test_srcdir="$(parseopt_string_value_for 'test-srcdir' "${_parsed_opts_json}" "${_default_target_directory}")"
  _commandunit_dir="$(parseopt_string_value_for 'commandunit-dir' "${_parsed_opts_json}" "${_test_srcdir}/.commandunit")"
  _test_workdir="$(parseopt_string_value_for 'test-workdir' "${_parsed_opts_json}" "${_test_srcdir}/.commandunit/work")"
  _test_reportdir="$(parseopt_string_value_for 'test-reportdir' "${_parsed_opts_json}" "${_test_workdir}")"
  _is_tapview_enabled="$(parseopt_boolean_value_for "tapview" "${_parsed_opts_json}")"
  _ignore_mtime="$(parseopt_boolean_value_for "ignore-mtime" "${_parsed_opts_json}")"
  _filter="$(parseopt_string_value_for 'filter' "${_parsed_opts_json}")"

  _commandunit_dir="$(__commandunit__normalize_path "${_commandunit_dir}")"
  _test_srcdir="$(__commandunit__normalize_path "${_test_srcdir}")"
  _test_workdir="$(__commandunit__normalize_path "${_test_workdir}")"
  _test_reportdir="$(__commandunit__normalize_path "${_test_reportdir}")"

  info "project-name: '${_project_name}'"
  info "parallel: '${_is_parallel}'"
  info "clean: '${_do_clean}'"
  info "tapview: '${_is_tapview_enabled}'"
  info "filter: '${_filter}'"
  info "ignore-mtime: '${_ignore_mtime}'"
  info "test-srcdir: '${_test_srcdir}'"
  info "test-workdir: '${_test_workdir}'"
  info "test-reportdir: '${_test_reportdir}'"
  info "commandunit-dir: '${_commandunit_dir}'"
  local _each _parallel_option="" _ignore_mtime_option=""
  if [[ "${_is_parallel}" == true ]]; then
    _parallel_option="--parallel"
  fi
  if [[ "${_ignore_mtime}" == true ]]; then
    _ignore_mtime_option="--ignore-mtime"
  fi
  if [[ "${_do_clean}" == true ]]; then
    rm -fr "${_test_workdir}"
  fi
  local _unknown_subcommands=()
  for _each in "${_subcommands[@]}"; do
    if ! array_contains "${_each}" "preprocess" "run" "report"; then
      _unknown_subcommands+=("${_each}")
    fi
  done
  if [[ "${#_unknown_subcommands[@]}" -gt 0 ]]; then
    abort "Unknown subcommand(s) are given: [$(join_by "," "${_unknown_subcommands[@]}")]."
  fi
  local _viewer_command="cat"
  if [[ "${_is_tapview_enabled}" == true ]]; then
    # shellcheck disable=SC2089
    _viewer_command="tapview"
  fi
  for _each in "${_subcommands[@]}"; do
    if [[ "${_each}" == "preprocess" ]]; then
      local _tapview=""
      if [[ "${_is_tapview_enabled}" == true ]]; then
        _tapview="--tapview"
      fi
      # _parallel_option is passed to the command without being quoted.
      "${_bindir}/testpreprocessor" \
        ${_parallel_option} \
        ${_ignore_mtime_option} \
        ${_tapview} \
        --output-dir="${_test_workdir}" \
        --filter="${_filter}" \
        "${_test_srcdir}" || abort "preprocessing errors were detected."
    elif [[ "${_each}" == "run" ]]; then
      export COMMANDUNIT_DIR="${_commandunit_dir}"
      mkdir -p "${_test_reportdir}"
      # shellcheck disable=SC2090
      # _parallel_option is passed to the command without being quoted.
      "${_bindir}/testrunner" \
        ${_parallel_option} \
        --test-reportdir="${_test_reportdir}" \
        --filter="${_filter}" \
        "${_test_workdir}" |
        ${_viewer_command} || break
    elif [[ "${_each}" == "report" ]]; then
      "${_bindir}/reportrenderer" "${_project_name}" "${_test_reportdir}/testreport.json" "${_test_reportdir}/testreport.adoc"
    else
      abort "Runtime error for subcommand: '${_each}'"
    fi
  done
  local _ret=0
  if array_contains "run" "${_subcommands[@]}"; then
    local _dir="${_test_reportdir#${COMMANDUNIT_HOSTFSROOT_MOUNTPOINT}}"
    _ret=1
    if [[ -e "${_test_reportdir}/testreport.json" ]]; then
      if [[ -e "${_test_reportdir}/testreport.adoc" ]]; then
        _successful="$(jq '.wasSuccessful' "${_test_reportdir}/testreport.json")"
        if [[ "${_successful}" == true ]]; then
          message "SUCCESSFUL ${_dir}/testreport.adoc"
          _ret=0
        else
          message "FAILED: CHECK ${_dir}/testreport.adoc"
        fi
      else
        message "ERROR: CHECK ${_dir}/testreport.json ('${_dir}/testreport.adoc' was not properly generated)"
      fi
    else
      message "ERROR: LOOK INTO FILES IN ${_dir} ('${_dir}/testreport.json' was not properly generated) "
    fi
  fi
  info_end "commandunit"
  return "${_ret}"
}

function __commandunit__normalize_path() {
  local _path="${1}"
  if [[ "${_path}" != /* ]]; then
    _path="${COMMANDUNIT_PWD}/${_path}"
  fi
  _path="$(realpath -m "${_path}")" # Clean up ../ ./ etc in _path.
  _path="${COMMANDUNIT_INDOCKER:+${COMMANDUNIT_HOSTFSROOT_MOUNTPOINT}}/${_path#/}"
  echo "${_path}"
}

function __commandunit__stop_commandunit() {
  abort "SIGINT TRAPPED!!!!"
}

trap __commandunit__stop_commandunit SIGINT

main "${@}"
